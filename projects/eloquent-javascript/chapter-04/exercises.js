////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step) {
  
  let array = [];
  
  step = step || 1;
  
  if (start === end) {
    
    return array; 
    
  }
  
  if (step > 0) {
    
      for (var i = start; i <= end; i += step) {
    
    array.push(i);
    
  }
    
  } else {
    
    for (var i = start; i >= end; i += step) {
      
      array.push(i);
      
    }
    
  }

     return array; 
}

  
////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  
  let result = 0;
  
  for (var i = 0; i < array.length; i++) {
    
    result += array[i];
    
  }
  
  return result; 

}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  
  let arr = [];
  
  for (var i = array.length - 1; i >= 0; i--) {
    
    arr.push(array[i]);
    
  }
  
  return arr; 

}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  
for (var i = 0; i < Math.floor(array.length/2); i++) {
  
  let old  = array[i];
  
  array[i] = array[array.length - 1 -i];
  
  array[array.length - 1 - i] = old;
  
}

  return array;

}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  
  let list = null;
  
  for (var i = array.length - 1; i >= 0; i--) {
    
    list = {value: array[i], rest: list}
    
  }

  return list;

}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {

   let arr = [];
  
  for (var node = list; node; node = node.rest) {
    
    arr.push(node.value)
    
  }
  
  

  return arr;

}



////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(value, list) {
  
  return {value, rest: list};

}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, number) {
  
  if (!list) {
    
    return undefined;
    
  } else if (number === 0) {
    
    return list.value;
    
  } else {
    
    return nth(list.rest, number - 1);
    
  }

}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(a, b) {
  
  if(a === b) {
    
    return true;
    
  } else if (a === null || typeof a !== 'object') {
    
    return false;
  
    
  } else if (b === null || typeof b !== 'object') {
    
    return false;
    
  } else if (Object.keys(a).length !== Object.keys(b).length) {
    
    return false;
    
  } else {
    
    for(var key in a) {
      
      return deepEqual(a[key], b[key]);
      
    }
    
  }
  
   
  
  return true; 

}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
